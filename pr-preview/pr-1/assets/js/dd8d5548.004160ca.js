"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[1943],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(a),m=l,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return a?n.createElement(k,o(o({ref:t},p),{},{components:a})):n.createElement(k,o({ref:t},p))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:l,o[1]=i;for(var u=2;u<r;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},18679:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),l=a(86010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r.tabItem,o),hidden:a},t)}},73992:(e,t,a)=>{a.d(t,{Z:()=>N});var n=a(87462),l=a(67294),r=a(86010),o=a(72957),i=a(16550),s=a(75238),u=a(33609),p=a(92560);function d(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:l}}=e;return{value:t,label:a,attributes:n,default:l}}))}function c(e){const{values:t,children:a}=e;return(0,l.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(r),(0,l.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})}),[r,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,r=c(e),[o,i]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[s,u]=k({queryString:a,groupId:n}),[d,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,r]=(0,p.Nk)(a);return[n,(0,l.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:n}),b=(()=>{const e=s??d;return m({value:e,tabValues:r})?e:null})();(0,l.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),h(e)}),[u,h,r]),tabValues:r}}var b=a(51048);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),c=e=>{const t=e.currentTarget,a=p.indexOf(t),n=u[a].value;n!==i&&(d(t),s(n))},m=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;t=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;t=p[a]??p[p.length-1];break}}t?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:o}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:c},o,{className:(0,r.Z)("tabs__item",g.tabItem,o?.className,{"tabs__item--active":i===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===n));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function y(e){const t=h(e);return l.createElement("div",{className:(0,r.Z)("tabs-container",g.tabList)},l.createElement(f,(0,n.Z)({},e,t)),l.createElement(v,(0,n.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return l.createElement(y,(0,n.Z)({key:String(t)},e))}},35672:(e,t,a)=>{a.d(t,{Z:()=>n});const n=Object.freeze({"app-latest-tag":"v1.0.0-rc7","app-latest-sha":"2ad80bc4aa1be3ddae6b417189ce58088a93c666","core-latest-tag":"v1.23.0-tm-v0.34.28","core-latest-sha":"67cc27bcb051f911c40444530f4e5257b04dd469","node-latest-tag":"v0.11.0-rc8","node-latest-sha":"e41f62662cf1844ba52d7a93d03cf79b6e363897"})},74348:(e,t,a)=>{a.d(t,{Z:()=>n});const n=Object.freeze({"app-latest-tag":"v0.13.3","app-latest-sha":"ab64b67797653e99691e846a4303bd71f44d1a8e","core-latest-tag":"v1.21.2-tm-v0.34.27","core-latest-sha":"d280f37a8376ed54ae03b10896fa25a4cbbc6d5b","node-latest-tag":"v0.10.4","node-latest-sha":"03ff94a7d779caf1225f3dccb53a68e8f1646dc6"})},17943:(e,t,a)=>{a.d(t,{Z:()=>n});const n=Object.freeze({golangNodeBSR:"1.20.2",golangNodeMocha:"1.20.2",golangNodeArabica:"1.20.2",golangApp:"1.20.2",golangCore:"1.20.2",golang:"1.20.2",arabicaChainId:"arabica-9",bsrChainId:"blockspacerace-0",mochaChainId:"mocha-3",arabicaRollkitVersion:"v0.10.2",mochaRollkitVersion:"v0.10.2",bsrRollkitVersion:"v0.8.1",localCelestiaDevnetVersion:"v0.8.2",golangQGB:"1.20.2",orchrelayVersion:"v0.2.0-app-v0.13.2-beta"})},35589:(e,t,a)=>{a.d(t,{Z:()=>n});const n=Object.freeze({"app-latest-tag":"v1.0.0-rc10","app-latest-sha":"96b86ba8c0a11b1b854da1c256c5d737dbaeede3","core-latest-tag":"v1.24.0-tm-v0.34.28","core-latest-sha":"d24c81afe0ecc4ccfbb7eb543a45a11794f04db4","node-latest-tag":"v0.11.0-rc8","node-latest-sha":"e41f62662cf1844ba52d7a93d03cf79b6e363897"})},67686:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>g,frontMatter:()=>p,metadata:()=>c,toc:()=>k});var n=a(87462),l=(a(67294),a(3905)),r=a(17943),o=a(35672),i=a(35589),s=(a(74348),a(73992)),u=a(18679);const p={sidebar_label:"Node RPC CLI tutorial",description:"Find out how to interact with a Celestia Node's RPC (Remote Procedure Call) API using the CLI to submit and retrieve data from the DA layer."},d="Celestia Node RPC CLI tutorial",c={unversionedId:"developers/node-tutorial",id:"version-v0.11.0-rc8/developers/node-tutorial",title:"Celestia Node RPC CLI tutorial",description:"Find out how to interact with a Celestia Node's RPC (Remote Procedure Call) API using the CLI to submit and retrieve data from the DA layer.",source:"@site/versioned_docs/version-v0.11.0-rc8/developers/node-tutorial.mdx",sourceDirName:"developers",slug:"/developers/node-tutorial",permalink:"/pr-preview/pr-1/v0.11.0-rc8/developers/node-tutorial",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/versioned_docs/version-v0.11.0-rc8/developers/node-tutorial.mdx",tags:[],version:"v0.11.0-rc8",frontMatter:{sidebar_label:"Node RPC CLI tutorial",description:"Find out how to interact with a Celestia Node's RPC (Remote Procedure Call) API using the CLI to submit and retrieve data from the DA layer."},sidebar:"developers",previous:{title:"Node API",permalink:"/pr-preview/pr-1/v0.11.0-rc8/developers/node-api"},next:{title:"Gateway API",permalink:"/pr-preview/pr-1/v0.11.0-rc8/category/gateway-api"}},m={},k=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Blobs",id:"blobs",level:3},{value:"Namespaces",id:"namespaces",level:3},{value:"Hardware requirements",id:"hardware-requirements",level:2},{value:"Setting up dependencies",id:"setting-up-dependencies",level:2},{value:"\ud83c\udf7a Installing Homebrew",id:"-installing-homebrew",level:4},{value:"\ud83d\uddc4 Install wget and jq",id:"-install-wget-and-jq",level:4},{value:"\ud83c\udf7a Installing Homebrew",id:"-installing-homebrew-1",level:4},{value:"\ud83d\uddc4 Install wget and jq",id:"-install-wget-and-jq-1",level:4},{value:"Install Golang",id:"install-golang",level:3},{value:"Celestia Node",id:"celestia-node",level:2},{value:"Install Celestia Node",id:"install-celestia-node",level:3},{value:"Instantiate a Celestia light node",id:"instantiate-a-celestia-light-node",level:3},{value:"Connect to a public core endpoint",id:"connect-to-a-public-core-endpoint",level:3},{value:"Keys and wallets",id:"keys-and-wallets",level:3},{value:"RPC CLI guide",id:"rpc-cli-guide",level:2},{value:"Setup",id:"setup",level:3},{value:"Auth token \ud83d\udd10",id:"auth-token-",level:4},{value:"Host URL",id:"host-url",level:4},{value:"Completions",id:"completions",level:4},{value:"Submitting data",id:"submitting-data",level:3},{value:"<code>SubmitPayForBlob</code> arguments",id:"submitpayforblob-arguments",level:4},{value:"Retrieving data",id:"retrieving-data",level:3},{value:"Examples",id:"examples",level:3},{value:"Check your balance",id:"check-your-balance",level:4},{value:"Check the balance of another address",id:"check-the-balance-of-another-address",level:4},{value:"Get your node ID",id:"get-your-node-id",level:4},{value:"Get your account address",id:"get-your-account-address",level:4},{value:"Get block header by height",id:"get-block-header-by-height",level:4},{value:"More examples",id:"more-examples",level:3},{value:"Query node information:",id:"query-node-information",level:4},{value:"Get data availability sampler stats:",id:"get-data-availability-sampler-stats",level:4},{value:"Transfer balance of utia to another account",id:"transfer-balance-of-utia-to-another-account",level:4},{value:"Additional resources",id:"additional-resources",level:2},{value:"Post an SVG as a PFB",id:"post-an-svg-as-a-pfb",level:3},{value:"Golang guide",id:"golang-guide",level:3},{value:"Troubleshooting",id:"troubleshooting",level:3}],h={toc:k},b="wrapper";function g(e){let{components:t,...a}=e;return(0,l.kt)(b,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"celestia-node-rpc-cli-tutorial"},"Celestia Node RPC CLI tutorial"),(0,l.kt)("p",null,"In this tutorial, we will cover how to use the Celestia Node RPC API\nto submit and retrieve data (blobs) from the data availability\nlayer by their namespace."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"To view a video tutorial for setting up a Celestia light node, click ",(0,l.kt)("a",{parentName:"p",href:"/pr-preview/pr-1/v0.11.0-rc8/developers/light-node-video"},"here"),".")),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"The gateway endpoints have been deprecated and will be removed in the future. If you would like to use them anyway, you can find more details ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/celestia-node/pull/2360"},"here"),".")),(0,l.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,l.kt)("p",null,"This tutorial is broken up into the following sections:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#hardware-requirements"},"Hardware requirements")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#setting-up-dependencies"},"Setting up dependencies")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#celestia-node"},"Install and run Celestia Node")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#rpc-cli-guide"},"RPC CLI guide"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#setup"},"Setup")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#submitting-data"},"Submitting data")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#retrieving-data"},"Retrieving data")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#more-examples"},"More examples")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#additional-resources"},"Additional resources"))),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"If you already have a running and funded node,\nyou can skip to the ",(0,l.kt)("a",{parentName:"p",href:"#rpc-cli-guide"},"RPC CLI guide")," section.")),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("h3",{id:"blobs"},"Blobs"),(0,l.kt)("p",null,"Data is posted to Celestia's DA layer by using ",(0,l.kt)("inlineCode",{parentName:"p"},"MsgPayForBlobs"),"\ntransactions to the core network. Read more about ",(0,l.kt)("inlineCode",{parentName:"p"},"MsgPayForBlobs"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/celestia-app/blob/main/x/blob/README.md#messages"},"here"),"."),(0,l.kt)("h3",{id:"namespaces"},"Namespaces"),(0,l.kt)("p",null,"Celestia partitions the block data into\nmultiple namespaces, one for every application. This allows applications\nto only download their data, and not the data of other applications.\nRead more about Namespaced Merkle Trees (NMTs) ",(0,l.kt)("a",{parentName:"p",href:"../../concepts/how-celestia-works/data-availability-layer/#namespaced-merkle-trees-nmts"},"here"),"."),(0,l.kt)("h2",{id:"hardware-requirements"},"Hardware requirements"),(0,l.kt)("p",null,"The following minimum hardware requirements are recommended for running a light node:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Memory: ",(0,l.kt)("strong",{parentName:"li"},"2 GB RAM")),(0,l.kt)("li",{parentName:"ul"},"CPU: ",(0,l.kt)("strong",{parentName:"li"},"Single Core")),(0,l.kt)("li",{parentName:"ul"},"Disk: ",(0,l.kt)("strong",{parentName:"li"},"25 GB SSD Storage")," (Recommended ",(0,l.kt)("strong",{parentName:"li"},"50 GB SSD Storage"),")"),(0,l.kt)("li",{parentName:"ul"},"Bandwidth: ",(0,l.kt)("strong",{parentName:"li"},"56 Kbps for Download/56 Kbps for Upload"))),(0,l.kt)("h2",{id:"setting-up-dependencies"},"Setting up dependencies"),(0,l.kt)("p",null,"First, make sure to update and upgrade the OS:"),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"apt",label:"APT",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt update && sudo apt upgrade -y\n"))),(0,l.kt)(u.Z,{value:"yum",label:"YUM",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo yum update\n")))),(0,l.kt)("p",null,"These are essential packages that are necessary to execute many tasks like\ndownloading files, compiling, and monitoring the node:"),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"apt",label:"APT",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install curl tar wget clang pkg-config libssl-dev jq build-essential git make ncdu -y\n"))),(0,l.kt)(u.Z,{value:"yum",label:"YUM",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"sudo yum install curl tar wget clang pkg-config libssl-dev jq build-essential git make ncdu -y\n"))),(0,l.kt)(u.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("h4",{id:"-installing-homebrew"},"\ud83c\udf7a Installing Homebrew"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://brew.sh"},"Homebrew")," is a package manager for macOS and Linux and will\nallow you to install your dependencies."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n')),(0,l.kt)("p",null,"Be sure to run the commands in the output that are similar to:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"==> Next steps:\n- Run these three commands in your terminal to add Homebrew to your PATH:\n    echo '# Set PATH, MANPATH, etc., for Homebrew.' >> /Users/joshstein/.zprofile\n    echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/joshstein/.zprofile\n    eval \"$(/opt/homebrew/bin/brew shellenv)\"\n")),(0,l.kt)("h4",{id:"-install-wget-and-jq"},"\ud83d\uddc4 Install wget and jq"),(0,l.kt)("p",null,"Using Homebrew, in your terminal:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"brew install wget && brew install jq\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/wget"},"wget")," is an internet file retriever and\n",(0,l.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq"},"jq")," is a lightweight command-line JSON\nprocessor.")),(0,l.kt)(u.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("h4",{id:"-installing-homebrew-1"},"\ud83c\udf7a Installing Homebrew"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://brew.sh"},"Homebrew")," is a package manager for macOS and Linux and will\nallow you to install your dependencies."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n')),(0,l.kt)("p",null,"Be sure to run the commands in the output that are similar to:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"==> Next steps:\n- Run these three commands in your terminal to add Homebrew to your PATH:\n    echo '# Set PATH, MANPATH, etc., for Homebrew.' >> /Users/joshstein/.zprofile\n    echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/joshstein/.zprofile\n    eval \"$(/opt/homebrew/bin/brew shellenv)\"\n")),(0,l.kt)("h4",{id:"-install-wget-and-jq-1"},"\ud83d\uddc4 Install wget and jq"),(0,l.kt)("p",null,"Using Homebrew, in your terminal:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"brew install wget && brew install jq\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/wget"},"wget")," is an internet file retriever and\n",(0,l.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq"},"jq")," is a lightweight command-line JSON\nprocessor."))),(0,l.kt)("h3",{id:"install-golang"},"Install Golang"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"celestia-app")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," are written in ",(0,l.kt)("a",{parentName:"p",href:"https://go.dev"},"Golang"),"\nso we must install Golang to build and run them."),(0,l.kt)(s.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',r.Z.golangNodeMocha,'"',(0,l.kt)("br",null),"cd $HOME",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"',(0,l.kt)("br",null),'rm "go$ver.linux-amd64.tar.gz"',(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',r.Z.golangNodeMocha,'"',(0,l.kt)("br",null),"cd $HOME",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-arm64.tar.gz"',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-arm64.tar.gz"',(0,l.kt)("br",null),'rm "go$ver.linux-arm64.tar.gz"',(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',r.Z.golangNodeMocha,'"',(0,l.kt)("br",null),"cd $HOME",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-arm64.tar.gz"',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-arm64.tar.gz"',(0,l.kt)("br",null),'rm "go$ver.darwin-arm64.tar.gz"',(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',r.Z.golangNodeMocha,'"',(0,l.kt)("br",null),"cd $HOME",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-amd64.tar.gz"',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-amd64.tar.gz"',(0,l.kt)("br",null),'rm "go$ver.darwin-amd64.tar.gz"',(0,l.kt)("br",null))))),(0,l.kt)("p",null,"Now we need to add the ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/go/bin")," directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,l.kt)(s.Z,{groupId:"shell",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"bash",label:"bash",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'))),(0,l.kt)(u.Z,{value:"zsh",label:"zsh",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-zsh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.zshrc\nsource $HOME/.zshrc\n')))),(0,l.kt)("p",null,"To check if Go was installed correctly run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version\n")),(0,l.kt)("p",null,"The output should be the version installed:"),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",r.Z.golangNodeMocha," linux/amd64"))),(0,l.kt)(u.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",r.Z.golangNodeMocha," linux/arm64"))),(0,l.kt)(u.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",r.Z.golangNodeMocha," darwin/arm64"))),(0,l.kt)(u.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",r.Z.golangNodeMocha," darwin/amd64"))))),(0,l.kt)(u.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',r.Z.golangNodeArabica,'"',(0,l.kt)("br",null),"cd $HOME",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"',(0,l.kt)("br",null),'rm "go$ver.linux-amd64.tar.gz"',(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',r.Z.golangNodeArabica,'"',(0,l.kt)("br",null),"cd $HOME",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.linux-arm64.tar.gz"',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.linux-arm64.tar.gz"',(0,l.kt)("br",null),'rm "go$ver.linux-arm64.tar.gz"',(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',r.Z.golangNodeArabica,'"',(0,l.kt)("br",null),"cd $HOME",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-arm64.tar.gz"',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-arm64.tar.gz"',(0,l.kt)("br",null),'rm "go$ver.darwin-arm64.tar.gz"',(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,'ver="',r.Z.golangNodeArabica,'"',(0,l.kt)("br",null),"cd $HOME",(0,l.kt)("br",null),'wget "https://golang.org/dl/go$ver.darwin-amd64.tar.gz"',(0,l.kt)("br",null),"sudo rm -rf /usr/local/go",(0,l.kt)("br",null),'sudo tar -C /usr/local -xzf "go$ver.darwin-amd64.tar.gz"',(0,l.kt)("br",null),'rm "go$ver.darwin-amd64.tar.gz"',(0,l.kt)("br",null))))),(0,l.kt)("p",null,"Now we need to add the ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/go/bin")," directory to ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,l.kt)(s.Z,{groupId:"shell",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"bash",label:"bash",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'))),(0,l.kt)(u.Z,{value:"zsh",label:"zsh",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-zsh"},'echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.zshrc\nsource $HOME/.zshrc\n')))),(0,l.kt)("p",null,"To check if Go was installed correctly run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"go version\n")),(0,l.kt)("p",null,"The output should be the version installed:"),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",r.Z.golangNodeArabica," linux/amd64"))),(0,l.kt)(u.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",r.Z.golangNodeArabica," linux/arm64"))),(0,l.kt)(u.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",r.Z.golangNodeArabica," darwin/arm64"))),(0,l.kt)(u.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"go version go",r.Z.golangNodeArabica," darwin/amd64")))))),(0,l.kt)("h2",{id:"celestia-node"},"Celestia Node"),(0,l.kt)("h3",{id:"install-celestia-node"},"Install Celestia Node"),(0,l.kt)(s.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"cd $HOME",(0,l.kt)("br",null),"rm -rf celestia-node",(0,l.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,l.kt)("br",null),"cd celestia-node/",(0,l.kt)("br",null),"git checkout tags/",i.Z["node-latest-tag"],(0,l.kt)("br",null),"make build",(0,l.kt)("br",null),"make install",(0,l.kt)("br",null),"make cel-key",(0,l.kt)("br",null))),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"$ celestia version",(0,l.kt)("br",null),"Semantic version: ",i.Z["node-latest-tag"],(0,l.kt)("br",null),"Commit: ",i.Z["node-latest-sha"],(0,l.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,l.kt)("br",null),"System version: amd64/linux",(0,l.kt)("br",null),"Golang version: go",r.Z.golangNodeMocha,(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"cd $HOME",(0,l.kt)("br",null),"rm -rf celestia-node",(0,l.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,l.kt)("br",null),"cd celestia-node/",(0,l.kt)("br",null),"git checkout tags/",i.Z["node-latest-tag"],(0,l.kt)("br",null),"make build",(0,l.kt)("br",null),"make install",(0,l.kt)("br",null),"make cel-key",(0,l.kt)("br",null))),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"$ celestia version",(0,l.kt)("br",null),"Semantic version: ",i.Z["node-latest-tag"],(0,l.kt)("br",null),"Commit: ",i.Z["node-latest-sha"],(0,l.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,l.kt)("br",null),"System version: arm64/linux",(0,l.kt)("br",null),"Golang version: go",r.Z.golangNodeMocha,(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"cd $HOME",(0,l.kt)("br",null),"rm -rf celestia-node",(0,l.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,l.kt)("br",null),"cd celestia-node/",(0,l.kt)("br",null),"git checkout tags/",i.Z["node-latest-tag"],(0,l.kt)("br",null),"make build",(0,l.kt)("br",null),"make go-install",(0,l.kt)("br",null),"make cel-key",(0,l.kt)("br",null))),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"$ celestia version",(0,l.kt)("br",null),"Semantic version: ",i.Z["node-latest-tag"],(0,l.kt)("br",null),"Commit: ",i.Z["node-latest-sha"],(0,l.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,l.kt)("br",null),"System version: arm64/darwin",(0,l.kt)("br",null),"Golang version: go",r.Z.golangNodeMocha,(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Mocha Testnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"cd $HOME",(0,l.kt)("br",null),"rm -rf celestia-node",(0,l.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,l.kt)("br",null),"cd celestia-node/",(0,l.kt)("br",null),"git checkout tags/",i.Z["node-latest-tag"],(0,l.kt)("br",null),"make build",(0,l.kt)("br",null),"make go-install",(0,l.kt)("br",null),"make cel-key",(0,l.kt)("br",null))),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"$ celestia version",(0,l.kt)("br",null),"Semantic version: ",i.Z["node-latest-tag"],(0,l.kt)("br",null),"Commit: ",i.Z["node-latest-sha"],(0,l.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,l.kt)("br",null),"System version: amd64/darwin",(0,l.kt)("br",null),"Golang version: go",r.Z.golangNodeMocha,(0,l.kt)("br",null)))))),(0,l.kt)(u.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"amd",label:"Ubuntu (AMD)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"cd $HOME",(0,l.kt)("br",null),"rm -rf celestia-node",(0,l.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,l.kt)("br",null),"cd celestia-node/",(0,l.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"],(0,l.kt)("br",null),"make build",(0,l.kt)("br",null),"make install",(0,l.kt)("br",null),"make cel-key",(0,l.kt)("br",null))),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"$ celestia version",(0,l.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"],(0,l.kt)("br",null),"Commit: ",o.Z["node-latest-sha"],(0,l.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,l.kt)("br",null),"System version: amd64/linux",(0,l.kt)("br",null),"Golang version: go",r.Z.golangNodeArabica,(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"arm",label:"Ubuntu (ARM)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"cd $HOME",(0,l.kt)("br",null),"rm -rf celestia-node",(0,l.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,l.kt)("br",null),"cd celestia-node/",(0,l.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"],(0,l.kt)("br",null),"make build",(0,l.kt)("br",null),"make install",(0,l.kt)("br",null),"make cel-key",(0,l.kt)("br",null))),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"$ celestia version",(0,l.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"],(0,l.kt)("br",null),"Commit: ",o.Z["node-latest-sha"],(0,l.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,l.kt)("br",null),"System version: arm64/linux",(0,l.kt)("br",null),"Golang version: go",r.Z.golangNodeArabica,(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"apple",label:"Mac (Apple)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"cd $HOME",(0,l.kt)("br",null),"rm -rf celestia-node",(0,l.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,l.kt)("br",null),"cd celestia-node/",(0,l.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"],(0,l.kt)("br",null),"make build",(0,l.kt)("br",null),"make go-install",(0,l.kt)("br",null),"make cel-key",(0,l.kt)("br",null))),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"$ celestia version",(0,l.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"],(0,l.kt)("br",null),"Commit: ",o.Z["node-latest-sha"],(0,l.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,l.kt)("br",null),"System version: arm64/darwin",(0,l.kt)("br",null),"Golang version: go",r.Z.golangNodeArabica,(0,l.kt)("br",null)))),(0,l.kt)(u.Z,{value:"mac",label:"Mac (Intel)",mdxType:"TabItem"},(0,l.kt)("p",null,"Installing ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," for Arabica Devnet means installing a specific version\nto be compatible with the network."),(0,l.kt)("p",null,"Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," binary by running the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"cd $HOME",(0,l.kt)("br",null),"rm -rf celestia-node",(0,l.kt)("br",null),"git clone https://github.com/celestiaorg/celestia-node.git",(0,l.kt)("br",null),"cd celestia-node/",(0,l.kt)("br",null),"git checkout tags/",o.Z["node-latest-tag"],(0,l.kt)("br",null),"make build",(0,l.kt)("br",null),"make go-install",(0,l.kt)("br",null),"make cel-key",(0,l.kt)("br",null))),(0,l.kt)("p",null,"Verify that the binary is working and check the version with the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia\nversion")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"$ celestia version",(0,l.kt)("br",null),"Semantic version: ",o.Z["node-latest-tag"],(0,l.kt)("br",null),"Commit: ",o.Z["node-latest-sha"],(0,l.kt)("br",null),"Build Date: Thu Dec 15 10:19:22 PM UTC 2022",(0,l.kt)("br",null),"System version: amd64/darwin",(0,l.kt)("br",null),"Golang version: go",r.Z.golangNodeArabica,(0,l.kt)("br",null))))))),(0,l.kt)("h3",{id:"instantiate-a-celestia-light-node"},"Instantiate a Celestia light node"),(0,l.kt)("p",null,"Now, let's instantiate a Celestia light node:"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note: RPC Endpoints are exposed in all ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," types\nsuch as Light, Bridge and Full Nodes.")),(0,l.kt)(s.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light init\n"))),(0,l.kt)(u.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light init --p2p.network arabica\n")))),(0,l.kt)("h3",{id:"connect-to-a-public-core-endpoint"},"Connect to a public core endpoint"),(0,l.kt)(s.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,l.kt)("p",null,"Let's now run the Celestia light node with a GRPC connection to\nan example public core endpoint."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note: You are also encouraged to find a community-run API endpoint\nand there are several in the Discord. This one is used for demonstration\npurposes. You can find a list of RPC endpoints ",(0,l.kt)("a",{parentName:"p",href:"../../nodes/mocha-testnet#rpc-endpoints"},"here"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --p2p.network mocha\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"--core.ip")," gRPC port defaults to 9090,\nso if you do not specify it in the command\nline, it will default to that port. You can\nadd the port after the IP address or use the\n",(0,l.kt)("inlineCode",{parentName:"p"},"--core.grpc.port")," flag to specify another\nport if you prefer."),(0,l.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,l.kt)("a",{parentName:"p",href:"../../nodes/celestia-node/#ports"},"ports")," section for information on\nwhich ports are required to be open on your machine."))),(0,l.kt)(u.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,l.kt)("p",null,"Let's now run the Celestia light node with a GRPC connection to\nan example public core endpoint."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note: You are also encouraged to find a community-run API endpoint\nand there are several in the Discord. This one is used for demonstration\npurposes. You can find a list of RPC endpoints ",(0,l.kt)("a",{parentName:"p",href:"../../nodes/arabica-devnet#rpc-endpoints"},"here"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --p2p.network arabica\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"--core.ip")," gRPC port defaults to 9090,\nso if you do not specify it in the command\nline, it will default to that port. You can\nadd the port after the IP address or use the\n",(0,l.kt)("inlineCode",{parentName:"p"},"--core.grpc.port")," flag to specify another\nport if you prefer."),(0,l.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,l.kt)("a",{parentName:"p",href:"../../nodes/celestia-node/#ports"},"ports")," section for information on\nwhich ports are required to be open on your machine.")))),(0,l.kt)("p",null,"For example, your command along with an RPC endpoint might look like this:"),(0,l.kt)(s.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip rpc-mocha.pops.one --p2p.network mocha\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,l.kt)("a",{parentName:"p",href:"../../nodes/celestia-node/#ports"},"ports")," section for information on\nwhich ports are required to be open on your machine."))),(0,l.kt)(u.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip consensus-validator-arabica-9.celestia-arabica.com --p2p.network arabica\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,l.kt)("a",{parentName:"p",href:"../../nodes/celestia-node/#ports"},"ports")," section for information on\nwhich ports are required to be open on your machine.")))),(0,l.kt)("h3",{id:"keys-and-wallets"},"Keys and wallets"),(0,l.kt)("p",null,"You can create your key for your node by running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add <key_name> --keyring-backend test --node.type light --p2p.network <network>\n")),(0,l.kt)("p",null,"You can start your light node with the key created above by running the\nfollowing command:"),(0,l.kt)(s.Z,{groupId:"network",mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --keyring.accname <key_name> --p2p.network mocha\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,l.kt)("a",{parentName:"p",href:"../../nodes/celestia-node/#ports"},"ports")," section for information on\nwhich ports are required to be open on your machine."))),(0,l.kt)(u.Z,{value:"arabica",label:"Arabica \ud83c\udfd7\ufe0f",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia light start --core.ip <ip-address> --keyring.accname <key_name> --p2p.network arabica\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,l.kt)("a",{parentName:"p",href:"../../nodes/celestia-node/#ports"},"ports")," section for information on\nwhich ports are required to be open on your machine.")))),(0,l.kt)("p",null,"Once you start the light node, a wallet key will be generated for you.\nYou will need to fund that address with Mocha Testnet or Arabica Devnet\ntokens to pay for ",(0,l.kt)("inlineCode",{parentName:"p"},"PayForBlob")," transactions or ",(0,l.kt)("inlineCode",{parentName:"p"},"PayForBlob transactions"),", respectively."),(0,l.kt)("p",null,"You can find the address by running the following command in\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node")," directory:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key list --node.type light --keyring-backend test --p2p.network <network>\n")),(0,l.kt)("p",null,"If you would like to fund your wallet with testnet tokens, head over\nto either the ",(0,l.kt)("inlineCode",{parentName:"p"},"#mocha-faucet")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"#arabica-faucet")," channels on the\nCelestia ",(0,l.kt)("a",{parentName:"p",href:"https://discord.gg/celestiacommunity"},"Discord"),"."),(0,l.kt)("p",null,"You can request funds to your wallet address using the following command in Discord:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$request <Wallet-Address>\n")),(0,l.kt)("p",null,"Where ",(0,l.kt)("inlineCode",{parentName:"p"},"<Wallet-Address>")," is the ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia1******")," address generated\nwhen you created the wallet."),(0,l.kt)("p",null,"With your wallet funded, you can move on to the next step."),(0,l.kt)("h2",{id:"rpc-cli-guide"},"RPC CLI guide"),(0,l.kt)("p",null,"This section of the tutorial will teach you how to interact with a\nCelestia node's\n",(0,l.kt)("a",{parentName:"p",href:"/api/v0.11.0-rc8"},"RPC (Remote Procedure Call) API"),"."),(0,l.kt)("p",null,"First, you will need to ",(0,l.kt)("a",{parentName:"p",href:"#setting-up-dependencies"},"install and run ",(0,l.kt)("inlineCode",{parentName:"a"},"celestia-node"))," if\nyou have not already. Open up another terminal window in order to begin querying the API."),(0,l.kt)("p",null,"The Celestia Node CLI (Command Line Interface) has a ",(0,l.kt)("inlineCode",{parentName:"p"},"rpc")," subcommand that\nallows you to interact with the node's RPC API via\nyour terminal."),(0,l.kt)("p",null,"The format for the ",(0,l.kt)("inlineCode",{parentName:"p"},"rpc")," subcommand is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc [module] [method] [...args]\n")),(0,l.kt)("h3",{id:"setup"},"Setup"),(0,l.kt)("h4",{id:"auth-token-"},"Auth token \ud83d\udd10"),(0,l.kt)("p",null,"In order to interact with the API using the ",(0,l.kt)("inlineCode",{parentName:"p"},"rpc")," subcommand,\nyou will need to set your authentication token."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"--auth TOKEN")," flag sets the authentication token,\notherwise it will read from the environment's\n",(0,l.kt)("inlineCode",{parentName:"p"},"CELESTIA_NODE_AUTH_TOKEN")," variable.\nIf a token is not found, authentication will not be set.\nAnd if authentication is not set, the request will fail."),(0,l.kt)("p",null,"To set your authentication token, you can use the\nfollowing command. Be sure to replace ",(0,l.kt)("inlineCode",{parentName:"p"},"<node-type>")," with\nthe type of node and ",(0,l.kt)("inlineCode",{parentName:"p"},"<network>"),"\nwith the network that you are running your node on:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"export CELESTIA_NODE_AUTH_TOKEN=$(celestia <node-type> auth admin --p2p.network <network>)\n")),(0,l.kt)("p",null,"Here's an example of how to set your auth token on a light node on Arabica:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"export CELESTIA_NODE_AUTH_TOKEN=$(celestia light auth admin --p2p.network arabica)\n")),(0,l.kt)("h4",{id:"host-url"},"Host URL"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"--host URL")," flag sets the host address,\nthe default is ",(0,l.kt)("inlineCode",{parentName:"p"},"localhost:26658")," over HTTP."),(0,l.kt)("h4",{id:"completions"},"Completions"),(0,l.kt)("p",null,"If you would like to turn on completions for the Celestia Node CLI ",(0,l.kt)("inlineCode",{parentName:"p"},"rpc"),"\nsubcommand, you can use the following command and follow the instructions\nin the CLI:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# pick your shell type from the array\ncelestia completion [bash | fish | powershell | zsh]\n")),(0,l.kt)("p",null,"If you'd like to see the help menu for your shell, you can then run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# pick your shell type from the array\ncelestia completion [bash | fish | powershell | zsh] --help\n")),(0,l.kt)("h3",{id:"submitting-data"},"Submitting data"),(0,l.kt)("p",null,"In this example, we will be submitting a ",(0,l.kt)("inlineCode",{parentName:"p"},"PayForBlob"),"\ntransaction using our light node."),(0,l.kt)("p",null,"Some things to consider:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"PFB is a ",(0,l.kt)("inlineCode",{parentName:"li"},"PayForBlob")," Message."),(0,l.kt)("li",{parentName:"ul"},"The endpoint also takes in ",(0,l.kt)("inlineCode",{parentName:"li"},"namespace_id")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"data")," values."),(0,l.kt)("li",{parentName:"ul"},"Namespace ID should be 10 bytes, prefixed by ",(0,l.kt)("inlineCode",{parentName:"li"},"0x")),(0,l.kt)("li",{parentName:"ul"},"Data should be in hex-encoded bytes of the raw message")),(0,l.kt)("p",null,"We use the following ",(0,l.kt)("inlineCode",{parentName:"p"},"namespace_id")," of ",(0,l.kt)("inlineCode",{parentName:"p"},"0x42690c204d39600fddd3")," and\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," value of ",(0,l.kt)("inlineCode",{parentName:"p"},"0xf1f20ca8007e910a3bf8b2e61da0f26bca07ef78717a6ea54165f5"),"."),(0,l.kt)("p",null,"You can generate your own ",(0,l.kt)("inlineCode",{parentName:"p"},"namespace_id")," and data values using this\nuseful Golang Playground we created ",(0,l.kt)("a",{parentName:"p",href:"https://go.dev/play/p/7ltvaj8lhRl"},"here"),"."),(0,l.kt)("p",null,"Here is an example of the format of the ",(0,l.kt)("inlineCode",{parentName:"p"},"PayForBlob")," transaction:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc blob SubmitPayForBlob [namespace in hex] [data in hex]\n")),(0,l.kt)("p",null,"We run the following to submit a blob to the network in hexadecimal format:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc blob Submit 0x42690c204d39600fddd3 0xf1f20ca8007e910a3bf8b2e61da0f26bca07ef78717a6ea54165f5\n")),(0,l.kt)("p",null,"We get the following output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "jsonrpc": "2.0",\n  "result": 272667,\n  "id": 1\n}\n')),(0,l.kt)("p",null,"We can also use a string of text as the data value, which will be\nconverted to base64. Here is an example of the format:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc blob Submit [namespace in hex] \"'[data]'\"\n")),(0,l.kt)("p",null,'And an example to submit "gm" as the plain text data:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc blob Submit 0x42690c204d39600fddd3 '\"gm\"'\n")),(0,l.kt)("p",null,"If you notice from the above output, it returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"height")," of\n",(0,l.kt)("inlineCode",{parentName:"p"},"272667")," which we will use for the next command."),(0,l.kt)("p",null,"Note: To learn more about status response codes, please navigate to\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/main/types/errors/errors.go"},"cosmos code explanation")),(0,l.kt)("h4",{id:"submitpayforblob-arguments"},(0,l.kt)("inlineCode",{parentName:"h4"},"SubmitPayForBlob")," arguments"),(0,l.kt)("p",null,"Using the ",(0,l.kt)("inlineCode",{parentName:"p"},"rpc")," subcommand, you can submit a blob to the network\nusing the ",(0,l.kt)("inlineCode",{parentName:"p"},"SubmitPayForBlob")," method."),(0,l.kt)("p",null,"The arguments for ",(0,l.kt)("inlineCode",{parentName:"p"},"SubmitPayForBlob")," are parsed specially,\nto improve UX."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SubmitPayForBlob")," can be done in a few ways:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("strong",{parentName:"li"},"namespace ID")," can be encoded as either hex or base64"),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("strong",{parentName:"li"},"blob")," can be hex (",(0,l.kt)("inlineCode",{parentName:"li"},"0x..."),"), base64 (",(0,l.kt)("inlineCode",{parentName:"li"},'"..."'),"), or a normal string which will be encoded to base64 (",(0,l.kt)("inlineCode",{parentName:"li"},"'\"Hello There!\"'"),")")),(0,l.kt)("h3",{id:"retrieving-data"},"Retrieving data"),(0,l.kt)("p",null,"After submitting your PFB transaction, upon success, the node will return\nthe block height for which the PFB transaction was included. You can then\nuse that block height and the namespace ID with which you submitted your\nPFB transaction to get your message shares (data) returned to you. In this example,\nthe block height we got was 272667 which we will use for the following command.\nRead more about shares in the ",(0,l.kt)("a",{parentName:"p",href:"/api/v0.11.0-rc8#share"},"Celestia Specs"),"."),(0,l.kt)("p",null,"Here is what an example of the format of the ",(0,l.kt)("inlineCode",{parentName:"p"},"GetAll")," command looks like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc blob GetAll [block height] [namespace in hex]\n")),(0,l.kt)("p",null,"Here is an example command to retrieve the data from above, on ",(0,l.kt)("inlineCode",{parentName:"p"},"arabica-9"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc blob GetAll 272667 0x42690c204d39600fddd3\n")),(0,l.kt)("p",null,"Will generate the following output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "result": [\n    {\n      "namespace": "AAAAAAAAAAAAAAAAAAAAAAAAAEJpDCBNOWAP3dM=",\n      "data": "8fIMqAB+kQo7+LLmHaDya8oH73hxem6lQWX1",\n      "share_version": 0,\n      "commitment": "R4DRTAENQ7fGawPbt8aMse1+YReCZYg87xZIZf2fAxc="\n    }\n  ],\n  "id": 1\n}\n')),(0,l.kt)("p",null,"The output here is base64-encoded."),(0,l.kt)("p",null,"To see the JSON request sent over the wire, for example for sending requests via cURL, pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"-\u2014print-request")," flag:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc blob GetAll 272667 0x42690c204d39600fddd3 --print-request\n")),(0,l.kt)("p",null,"Response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "Request": {\n    "id": 1,\n    "jsonrpc": "2.0",\n    "method": "blob.GetAll",\n    "params": [\n      272667,\n      [\n        "AAAAAAAAAAAAAAAAAAAAAAAAAEJpDCBNOWAP3dM="\n      ]\n    ]\n  },\n  "Response": {\n    "jsonrpc": "2.0",\n    "result": [\n      {\n        "namespace": "AAAAAAAAAAAAAAAAAAAAAAAAAEJpDCBNOWAP3dM=",\n        "data": "8fIMqAB+kQo7+LLmHaDya8oH73hxem6lQWX1",\n        "share_version": 0,\n        "commitment": "R4DRTAENQ7fGawPbt8aMse1+YReCZYg87xZIZf2fAxc="\n      }\n    ],\n    "id": 1\n  }\n}\n')),(0,l.kt)("p",null,"Simiarly, you can cURL the response by running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST -H "Authorization: Bearer ${CELESTIA_NODE_AUTH_TOKEN}" \\\n   -H \'Content-Type: application/json\' \\\n   -d \'{\n  "id": 1,\n  "jsonrpc": "2.0",\n  "method": "blob.GetAll",\n  "params": [\n   272667,\n   [\n    "AAAAAAAAAAAAAAAAAAAAAAAAAEJpDCBNOWAP3dM="\n   ]\n  ]\n }\' \\\n   http://localhost:26658\n')),(0,l.kt)("p",null,"Response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'{"jsonrpc":"2.0","result":[{"namespace":"AAAAAAAAAAAAAAAAAAAAAAAAAEJpDCBNOWAP3dM=","data":"8fIMqAB+kQo7+LLmHaDya8oH73hxem6lQWX1","share_version":0,"commitment":"R4DRTAENQ7fGawPbt8aMse1+YReCZYg87xZIZf2fAxc="}],"id":1}\n')),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)("h4",{id:"check-your-balance"},"Check your balance"),(0,l.kt)("p",null,"Let's query our node for the balance of its default account\n(which is the account associated with the ",(0,l.kt)("inlineCode",{parentName:"p"},"CELESTIA_NODE_AUTH_TOKEN"),"\nkey we generated above):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc state Balance\n")),(0,l.kt)("p",null,"The response will look similar to:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'{\n \u201cjsonrpc\u201d: \u201c2.0",\n \u201cresult\u201d: {\n  \u201cdenom\u201d: \u201cutia\u201d,\n  \u201camount\u201d: \u201c79934811\u201d\n },\n \u201cid\u201d: 1\n}\n')),(0,l.kt)("h4",{id:"check-the-balance-of-another-address"},"Check the balance of another address"),(0,l.kt)("p",null,"Here is an example of the format of the ",(0,l.kt)("inlineCode",{parentName:"p"},"BalanceForAddress")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc state BalanceForAddress [address]\n")),(0,l.kt)("p",null,"Let's query our node for the balance of another address:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc state BalanceForAddress celestia10rtd9lhel2cuh6c659l25yncl6atcyt37umard\n")),(0,l.kt)("p",null,"The response will be the balance of the address you queried:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "jsonrpc": "2.0",\n  "result": {\n    "denom": "utia",\n    "amount": "100000000"\n  },\n  "id": 1\n}\n')),(0,l.kt)("h4",{id:"get-your-node-id"},"Get your node ID"),(0,l.kt)("p",null,"This is an RPC call in order to get your node's peerId information:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc p2p Info\n")),(0,l.kt)("p",null,"The node ID is in the ",(0,l.kt)("inlineCode",{parentName:"p"},"ID")," value from the response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "jsonrpc": "2.0",\n  "result": {\n    "ID": "12D3KooWQHg8eo2DMjkw9WrNrhDq5Z7tPs32uMJkpj8njbGNF8kj",\n    "Addrs": [\n      "/ip4/10.0.0.171/tcp/2121",\n      "/ip6/::1/tcp/2121",\n      "/ip4/10.0.0.171/udp/2121/quic-v1",\n      "/ip6/::1/udp/2121/quic-v1",\n      "/ip4/71.200.65.106/tcp/54588",\n      "/ip4/71.200.65.106/udp/54588/quic-v1"\n    ]\n  },\n  "id": 1\n}\n')),(0,l.kt)("h4",{id:"get-your-account-address"},"Get your account address"),(0,l.kt)("p",null,"This is an RPC call in order to get your node's account address:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc state AccountAddress\n")),(0,l.kt)("p",null,"Response: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "jsonrpc": "2.0",\n  "result": "celestia182wascu47m2fsu6davhktsaledd4pukahs2dgs",\n  "id": 1\n}\n')),(0,l.kt)("h4",{id:"get-block-header-by-height"},"Get block header by height"),(0,l.kt)("p",null,"Here is an example of the format of the ",(0,l.kt)("inlineCode",{parentName:"p"},"GetByHeight")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc header GetByHeight [height]\n")),(0,l.kt)("p",null,"Now, let's get the block header information."),(0,l.kt)("p",null,"Here we will get the header from Block 1:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc header GetByHeight 1\n")),(0,l.kt)("p",null,"It will output something like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'{\n \u201cjsonrpc\u201d: \u201c2.0",\n \u201cresult\u201d: {\n  \u201cheader\u201d: {\n   \u201cversion\u201d: {\n    \u201cblock\u201d: \u201c11\u201d,\n    \u201capp\u201d: \u201c1\u201d\n   },\n   \u201cchain_id\u201d: \u201carabica-9\u201d,\n   \u201cheight\u201d: \u201c1\u201d,\n   \u201ctime\u201d: \u201c2023-05-30T15:06:21.9265Z\u201d,\n   \u201clast_block_id\u201d: {\n    \u201chash\u201d: \u201c\u201d,\n    \u201cparts\u201d: {\n     \u201ctotal\u201d: 0,\n     \u201chash\u201d: \u201c\u201d\n    }\n   },\n   \u201clast_commit_hash\u201d: \u201cE3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855",\n   \u201cdata_hash\u201d: \u201c3D96B7D238E7E0456F6AF8E7CDF0A67BD6CF9C2089ECB559C659DCAA1F880353",\n   \u201cvalidators_hash\u201d: \u201cC4F7F08A8F3024A28D6486B4BA434B12391A29DFA8C04C74589A013A9A0BE427",\n   \u201cnext_validators_hash\u201d: \u201cC4F7F08A8F3024A28D6486B4BA434B12391A29DFA8C04C74589A013A9A0BE427",\n   \u201cconsensus_hash\u201d: \u201c048091BC7DDC283F77BFBF91D73C44DA58C3DF8A9CBC867405D8B7F3DAADA22F\u201d,\n   \u201capp_hash\u201d: \u201cE3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855",\n   \u201clast_results_hash\u201d: \u201cE3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855",\n   \u201cevidence_hash\u201d: \u201cE3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855",\n   \u201cproposer_address\u201d: \u201c7CD439E5F1A00E8594AA243CC9C4BFE1A6E7C397"\n  },\n  \u201cvalidator_set\u201d: {\n   \u201cvalidators\u201d: [\n    {\n     \u201caddress\u201d: \u201c7CD439E5F1A00E8594AA243CC9C4BFE1A6E7C397",\n     \u201cpub_key\u201d: {\n      \u201ctype\u201d: \u201ctendermint/PubKeyEd25519\u201d,\n      \u201cvalue\u201d: \u201coubutxNSyuD0XZNmMQSraHazmE2PjFsZVZ8RNHFX3WA=\u201d\n     },\n     \u201cvoting_power\u201d: \u201c500000000\u201d,\n     \u201cproposer_priority\u201d: \u201c0\u201d\n    }\n   ],\n   \u201cproposer\u201d: {\n    \u201caddress\u201d: \u201c7CD439E5F1A00E8594AA243CC9C4BFE1A6E7C397",\n    \u201cpub_key\u201d: {\n     \u201ctype\u201d: \u201ctendermint/PubKeyEd25519\u201d,\n     \u201cvalue\u201d: \u201coubutxNSyuD0XZNmMQSraHazmE2PjFsZVZ8RNHFX3WA=\u201d\n    },\n    \u201cvoting_power\u201d: \u201c500000000\u201d,\n    \u201cproposer_priority\u201d: \u201c0\u201d\n   }\n  },\n  \u201ccommit\u201d: {\n   \u201cheight\u201d: 1,\n   \u201cround\u201d: 0,\n   \u201cblock_id\u201d: {\n    \u201chash\u201d: \u201cE5D620B5BE7873222DCD83464C285FD0F215C209393E7481F9A5979280AD6CA2\u201d,\n    \u201cparts\u201d: {\n     \u201ctotal\u201d: 1,\n     \u201chash\u201d: \u201c5BDD329766F3803594FA840D5B4860A82115AFA70CB307F28F7E84D3FE883A55\u201d\n    }\n   },\n   \u201csignatures\u201d: [\n    {\n     \u201cblock_id_flag\u201d: 2,\n     \u201cvalidator_address\u201d: \u201c7CD439E5F1A00E8594AA243CC9C4BFE1A6E7C397\u201d,\n     \u201ctimestamp\u201d: \u201c2023-05-30T17:44:48.957739642Z\u201d,\n     \u201csignature\u201d: \u201cvgp6mcStXsCN5OmmqtPJCReoSu47bRcysDphTbXjqq4FuR876dwMD0fu/8lyrrpLBSt3vMAA0bTQ0GggXh6VAw==\u201d\n    }\n   ]\n  },\n  \u201cdah\u201d: {\n   \u201crow_roots\u201d: [\n    \u201c//////////////////////////////////////7//////////////////////////////////////huZWOTTDmD36N1F75A9BshxNlRasCnNpQiWqIhdVHcU\u201d,\n    \u201c/////////////////////////////////////////////////////////////////////////////5iieeroHBMfF+sER3JpvROIeEJZjbY+TRE0ntADQLL3\u201d\n   ],\n   \u201ccolumn_roots\u201d: [\n    \u201c//////////////////////////////////////7//////////////////////////////////////huZWOTTDmD36N1F75A9BshxNlRasCnNpQiWqIhdVHcU\u201d,\n    \u201c/////////////////////////////////////////////////////////////////////////////5iieeroHBMfF+sER3JpvROIeEJZjbY+TRE0ntADQLL3"\n   ]\n  }\n },\n \u201cid\u201d: 1\n}\n')),(0,l.kt)("h3",{id:"more-examples"},"More examples"),(0,l.kt)("h4",{id:"query-node-information"},"Query node information:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc node Info\n")),(0,l.kt)("h4",{id:"get-data-availability-sampler-stats"},"Get data availability sampler stats:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc das SamplingStats\n")),(0,l.kt)("h4",{id:"transfer-balance-of-utia-to-another-account"},"Transfer balance of utia to another account"),(0,l.kt)("p",null,"First, set your address as a variable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"export ADDRESS=celestia1c425ckmve2489atttx022qpc02gxspa29wmh0d\n")),(0,l.kt)("p",null,"Then, transfer the amount of tokens that you would like, while setting the recipient's address, gas fee, and gasLimit. This is what the format will look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc state Transfer $ADDRESS [amount in utia] [gas fee in utia] [gas fee in utia]\n")),(0,l.kt)("p",null,"Here is an example, sending 0.1 TIA, with a gas fee of 0.008 TIA, and a gas limit of 0.08 TIA:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc state Transfer $ADDRESS 100000 8000 80000\n")),(0,l.kt)("p",null,"If you'd just like to return the transaction hash, you can use jq:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"celestia rpc state Transfer $ADDRESS 100000 8000 80000 | jq .result.txhash\n")),(0,l.kt)("h2",{id:"additional-resources"},"Additional resources"),(0,l.kt)("h3",{id:"post-an-svg-as-a-pfb"},"Post an SVG as a PFB"),(0,l.kt)("p",null,"If you'd like to create your own SVG, post it to Celestia, and retrieve it,\nyou can check out the ",(0,l.kt)("a",{parentName:"p",href:"https://based64.xyz/"},"Base64 SVG Tutorial"),"."),(0,l.kt)("h3",{id:"golang-guide"},"Golang guide"),(0,l.kt)("p",null,"If you're interested in interacting with the node's API in Go\n(",(0,l.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/celestia-node/blob/main/api/rpc/client/client.go"},(0,l.kt)("inlineCode",{parentName:"a"},"client.go")),"),\nyou can use the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/renaynay/da-rpc-client-tutorial"},"da-rpc-client-tutorial"),"\nrepo."),(0,l.kt)("h3",{id:"troubleshooting"},"Troubleshooting"),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"If you encounter an error like:"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'"rpc error: code = NotFound desc = account celestia1krkle0n547u0znz3unnln8paft2dq4z3rznv86 not found"\n')),(0,l.kt)("p",{parentName:"admonition"},"It is possible that the account you are trying to submit a ",(0,l.kt)("inlineCode",{parentName:"p"},"PayForBlob")," from\ndoesn't have testnet tokens yet. Ensure the testnet faucet has funded your\naccount with tokens and then try again.")))}g.isMDXComponent=!0}}]);